package com.atguigu.config;

import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Conditional;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Lazy;

import com.atguigu.bean.Color;
import com.atguigu.bean.ColorFactoryBean;
import com.atguigu.bean.Person;
import com.atguigu.bean.Red;
import com.atguigu.condition.LinuxCondition;
import com.atguigu.condition.MyImportBeanDefinitionRegistrar;
import com.atguigu.condition.MyImportSelector;
import com.atguigu.condition.WindowsCondition;

//类中组件统一设置 满足当前条件这个类中配置的所有bean注册才会生效
@Conditional({WindowsCondition.class})
@Configuration
@Import({Color.class, Red.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class})
// 导入组件，id默认是组件的全类名
public class MainConfig2 {
	
	/**
	 * Specifies the name of the scope to use for the annotated component/bean.
	 * <p>Defaults to an empty string ({@code ""}) which implies
	 * {@link ConfigurableBeanFactory#SCOPE_SINGLETON SCOPE_SINGLETON}.
	 * @since 4.2
	 * @see ConfigurableBeanFactory#SCOPE_PROTOTYPE
	 * @see ConfigurableBeanFactory#SCOPE_SINGLETON
	 * @see org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST
	 * @see org.springframework.web.context.WebApplicationContext#SCOPE_SESSION
	 * @see #value
	 * 
	 * prototype:多实例：ioc容器启动并不会去调用方法创建对象放在容器中，每次获取的时候才会调用方法创建对象。
	 * singleton:单实例 （默认值）:ioc容器启动会调用方法创建对象放入ioc容器中。
	 * 							以后每次获取就是直接从容器(map.get())中拿
	 * request:同一次请求创建一个实例
	 * session:同一个session创建一个实例
	 * 
	 * 懒加载：
	 * 	单实例bean:默认是在容器启动的时候创建对象。
	 *  @Lazy 懒加载：容器启动不创建对象，第一次使用（获取）Bean在创建对象，并进行初始化。
	 */
//	@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
	@Lazy 
	@Bean("person")
	public Person person() {
		System.out.println("给容器添加Person");
		return new Person("张三",25);
	}
	
	/**
	 * @Conditional({}) :按照一定的条件进行判断，满足条件给容器中注册bean
	 * 如果系统是windows，给容器注册("bill") 
	 * 如果系统是linux，给容器注册("linus")
	 */
	
	@Bean("bill")
	public Person person01() {
		return new Person("Bill Gates",62);
	}
	
	@Conditional({LinuxCondition.class})
	@Bean("linus")
	public Person person02() {
		return new Person("linus",48);
	}
	
	/**
	 * 给容器中注册组件
	 * 1.包扫描+组件标注注解(@Controller @Service @Component @Repository)
	 * 2.@Bean【导入第三方包里面的组件】
	 * 3.@Import【快速给容器中导入一个组件】
	 *     1)、@Import({要导入的组件}),id默认是组件的全类名
	 *     2)、ImportSelector:返回需要导入的组件的全类名数组
	 *     3)、ImportBeanDefinitionRegistrar:
	 * 4.使用Spring提过的FactoryBean(工厂Bean)
	 *     1)、默认获取到的是工厂bean调用getObject创建的对象
	 *     2)、要获取工厂Bean本身，我们要给id前面加一个&
	 *         获取工厂Bean本身 查看BeanFactory类可知
	 */
	
	@Bean
	public ColorFactoryBean colorFactoryBean() {
		return new ColorFactoryBean();
	}
	
	
}
